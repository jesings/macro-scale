.macro cspeek
    mov cstop(%rip), %rdi
    mov (%rdi), %rdi
.endm
.macro argy numargs
    call inpstream
    lea buf(%rip), %rdi
    mov $\numargs, %rsi
    call getargs
    mov $\numargs, %rdi
    call convertargs
    lea args(%rip), %r8
    .altmacro
    argshelper %(\numargs-1), 0
.endm
.macro argshelper regn, argo
.altmacro
    movsd \argo(%r8), %xmm\regn
    .if \regn
        argshelper %(\regn-1), %(\argo+8)
    .endif
.endm
.macro applytris
    cspeek
    mov trim(%rip), %rsi
    call multiplymatrix
    call drawtris
    mov trim(%rip), %rdi
    movq $0, 24(%rdi)
.endm
.macro applyedges
    cspeek
    mov edgem(%rip), %rsi
    call multiplymatrix
    mov edgem(%rip), %rdi
    mov $0xffffff, %rsi
    call drawedges
    mov edgem(%rip), %rdi
    movq $0, 24(%rdi)
.endm
.macro calctoken token, fxn
    lea \token(%rip), %rsi
    call mstrcmp
    test %rax, %rax
    jne \fxn
.endm
.macro manipulatefxn arg0,arg1,labelname
    lea \arg0(%rip), %rsi
    call mstrcmp
    test %rax, %rax
    je \labelname
    argy 3
    cspeek
    lea \arg1(%rip), %rax
    call genmanipulate
    jmp afterl
    \labelname:
.endm
.macro shapefxn word, num, makefxn, apply, labelname, matrix
    lea \word(%rip), %rsi
    call mstrcmp
    test %rax, %rax
    je \labelname
    argy \num
    mov \matrix(%rip), %rdi
    call \makefxn
    \apply
    jmp afterl
    \labelname:
.endm
.macro splinefxn word, matrixname, labelname
    lea \word(%rip), %rsi
    call mstrcmp
    test %rax, %rax
    je \labelname
    argy 8
    mov edgem(%rip), %rdi
    lea \matrixname(%rip), %rsi
    call makespline
    applyedges
    jmp afterl
    \labelname:
.endm
.macro csparse word, csfunc, labelname
    lea \word(%rip), %rsi
    call mstrcmp
    test %rax, %rax
    je \labelname
    call \csfunc
    jmp afterl
    \labelname:
.endm
.global parse
.data
    line: .asciz "line"
    scale: .asciz "scale"
    move: .asciz "move"
    rotate: .asciz "rotate"
    display: .asciz "display"
    save: .asciz "save"
    convert: .asciz "convert"
    circle: .asciz "circle"
    hermite: .asciz "hermite"
    bezier: .asciz "bezier"
    box: .asciz "box"
    sphere: .asciz "sphere"
    torus: .asciz "torus"
    cspushm: .asciz "push"
    cspopm: .asciz "pop"
.bss
    buf: .zero 1024
    curchar: .byte 0
    args: .zero 64
    lens: .zero 64
    streamdone: .byte 0
.text
//make a helper function to gather args
rotatel:
    call inpstream
    lea buf(%rip),%rdi
    mov $2, %rsi
    call getargs
    lea args(%rip), %r8
    mov 8(%r8), %rax
    push %rax
    mov $2, %rdi
    call convertargs
    lea args(%rip), %r8
    movsd (%r8), %xmm0
    call deg2rad
    pop %rax
    cmpb $0x79,(%rax)
    je doyro
    jg dozro
    lea rotatex(%rip), %rax
    jmp endro
    doyro:
    lea rotatey(%rip), %rax
    jmp endro
    dozro:
    lea rotatez(%rip), %rax
    endro:
    cspeek
    call genrotate
    jmp afterl
.macro destroyfile a,b,c
    movups %xmm0, \a(%rdi)
    movb $0x20, \b(%rdi)
    vmovups %ymm1, \c(%rdi)
    call system@plt
    mov $87, %rax
    lea name(%rip), %rdi
    syscall//remove temporary file
    jmp afterl
.endm
displayl:
    lea name(%rip), %rdi
    call pr
    vmovups name(%rip), %ymm1
    movsd display(%rip),%xmm0
    lea buf(%rip), %rdi
    destroyfile 0,7,8
savel:
    lea name(%rip), %rdi
    call pr
    call inpstream
    vmovups buf(%rip), %ymm1
    movsd convert(%rip),%xmm0
    movsd %xmm0, buf(%rip)
    lea buf(%rip), %rdi
    movb $0x20, 7(%rdi)
    //filename is limited to 31 characters
    movups name(%rip), %xmm0
    destroyfile 8,19,20
inpstream://file descriptor in parsefd(%rip), returns a string in %rax, or 0 if an EOF is encountered
    mov parsefd(%rip), %rdi
    xor %rcx, %rcx
    lea curchar(%rip), %rsi
    mov $1, %rdx
    nchar:
    xor %rax, %rax
    push %rcx
    syscall
    pop %rcx
    mov curchar(%rip), %r8b
    lea buf(%rip), %r9
    movb %r8b, (%r9,%rcx)
    inc %rcx
    cmp $0, %rax
    jne noteof
    movb $0, (%r9,%rcx)
    movb $1, streamdone(%rip)
    ret
    noteof:
    cmp $'\n',curchar(%rip)
    jne nchar
    dec %rcx
    movb $0, (%r9,%rcx)
    lea buf(%rip), %rax
    ret
parse:
    parseloop:
    call inpstream
    mov %rax, %rdi
    movb streamdone(%rip), %al
    cmpb $1, %al
    je end
    manipulatefxn scale, dilate,.a
    manipulatefxn move, transform,.b
    shapefxn circle, 4, makecircle, applyedges, .c, edgem
    shapefxn sphere, 4, makesphere, applytris, .d, trim
    shapefxn torus, 5, maketorus, applytris, .e, trim
    shapefxn box, 6, makebox, applytris, .f, trim
    shapefxn line, 6, addedge, applyedges, .g, edgem
    splinefxn hermite, hermitematrix, .h
    splinefxn bezier, beziermatrix, .i
    csparse cspushm, cspush, .j
    csparse cspopm, cspop, .k
    calctoken rotate, rotatel
    calctoken display, displayl
    calctoken save, savel
    afterl:
    movb streamdone(%rip), %al
    cmpb $1, %al
    je end
    //rax is the string
    jmp parseloop
    end:
    ret
strlen://rdi is the string
    xor %rax, %rax
    lstart:
    movb (%rdi, %rax), %cl
    testb %cl,%cl 
    je lenend
    inc %rax
    jmp lstart
    lenend:
    ret
mstrcmp://rdi is string 1, rsi is string 2
    xor %rax, %rax
    cmpstart:
    movb (%rdi, %rax), %cl
    test %cl, %cl
    je nend
    movb (%rsi, %rax), %dl
    cmpb %cl,%dl 
    jne nend
    inc %rax
    jmp cmpstart
    nend:
    movb (%rsi, %rax), %dl
    test %dl, %dl
    je yend
    mov $0, %rax
    ret
    yend:
    mov $1, %rax
    ret
convert2: //string in rdi, length in rsi
    xor %rdx, %rdx
    xor %rcx, %rcx
    xor %rax, %rax
    cmpb $0x2d,(%rdi)
    jne cvt2i
    inc %rdx
    cvt2i:
    imul $10, %rax
    movb (%rdi,%rdx), %cl
    subb $0x30, %cl
    add %rcx, %rax
    inc %rdx
    cmp %rdx, %rsi
    jne cvt2i
    cmpb $0x2d, (%rdi)
    jne afterneg
    neg %rax
    afterneg:
    ret
convertargs://number of args is in %rdi, converts all the args to ints, rather than pointers
    dec %rdi
    cmp $0, %rdi
    jl convertaend
    lea args(%rip), %r8
    lea lens(%rip), %r9
    push %rdi
    mov (%r9,%rdi,8),%rsi
    shl $3, %rdi
    add %r8, %rdi
    mov (%rdi), %rdi
    call convert2
    pop %rdi
    cvtsi2sd %rax, %xmm0
    movsd %xmm0, (%r8,%rdi,8)
    jmp convertargs
    convertaend:
    ret
    
getargs: //input in %rdi, count in %rsi, output is in args
    xor %rax, %rax
    dec %rsi
    cmp $0, %rsi
    jl getend
    argstart:
    movb (%rdi, %rax), %cl
    or $0x20, %cl
    cmpb $0x20,%cl 
    je argend
    inc %rax
    jmp argstart
    argend:
    lea args(%rip),%r8
    mov %rdi, (%r8,%rsi,8)
    lea lens(%rip),%r8
    mov %rax, (%r8,%rsi,8)
    inc %rax
    add %rax, %rdi
    jmp getargs
    getend:
    ret
